{"remainingRequest":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/knkbga/chartsHQ/SystemA/Client/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/knkbga/chartsHQ/SystemA/Client/src/App.vue","mtime":1561979297862},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/css-loader/index.js","mtime":1561979297042},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1561979297758},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/postcss-loader/src/index.js","mtime":1561979297414},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/sass-loader/lib/loader.js","mtime":1561979297598},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/cache-loader/dist/cjs.js","mtime":1561979296854},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/vue-loader/lib/index.js","mtime":1561979297758}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.input-fields{ \n  .input-wrapper, .headline-wrapper {\n    display: inline-block;\n    margin: 10px;\n  }\n  .headline-wrapper {\n    .headline {\n      text-align: left;\n    }\n  }\n  .input-wrapper {\n    button {\n      display: inline-block;\n      border: 0px;\n      border-radius: 5px;\n      margin: 7px 13px;\n      cursor: pointer;\n    }\n\n    button.primary {\n      background-color: #1ca3cc;\n      color: #fff;\n    }\n  }\n}\n\n.output-fields {\n\n  .output-wrapper {\n    width: 300px;\n\n    .output-stats {\n      text-align: left;\n    }\n  }\n  \n}\n\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <h4 style=\"color:red\">{{ getPrompt }}</h4>\n    <div class=\"input-fields\">\n      <div class=\"headline-wrapper\">\n        <h2 class=\"headline\">Enter list</h2>\n        <p>Enter comma seperated list of numbers</p>\n      </div>\n      <div class=\"input-wrapper\">\n        <input @input=\"onChange\" v-model=\"inputString\" :disabled=\"getStatus==='wait'\" class=\"input-string\" type=\"text\">\n        <br>\n        <button v-on:click=\"genRandom()\">Generate<br>Random Numbers</button>\n        <button v-on:click=\"genStats()\" class=\"primary\">Calculate<br>Statistics</button>\n      </div>\n    </div>\n    <hr>\n    <div class=\"output-fields\" align=\"center\">\n      <div class=\"output-wrapper\">\n        <p class=\"output-stats\">\n          <span>Original Data: </span>\n          <span>{{ '[' + inputString + ']' }}</span>\n        </p>\n        <p class=\"output-stats\">\n          <span>Mean: </span>\n          <span>{{ getStats.mean }}</span>\n        </p>\n        <p class=\"output-stats\">\n          <span>Median: </span>\n          <span>{{ getStats.median }}</span>\n        </p>\n        <p class=\"output-stats\">\n          <span>Variance: </span>\n          <span>{{ getStats.variance }}</span>\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'app',\n  data() {\n    return {\n      stats:{\n        mean: '',\n        median: '',\n        variance: ''\n      }\n    }\n  },\n  methods: {\n    genRandom() {\n      this.$store.dispatch('genRandom')\n    },\n    genStats() {\n      if(this.inputString == '') {\n        alert(\"Input is empty\")\n      } else {\n        this.$store.dispatch('genStats', this.inputString)\n      }\n    },\n    onChange(e) {\n      this.$store.dispatch('updateInput', e.target.value)\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'getStatus',\n      'getInputString',\n      'getPrompt',\n      'getStats'\n    ]),\n    formatStringToArray() {\n      return '[' + this.inputString + ']'\n    },\n    inputString: {\n      get() {\n        if(this.getInputString != '')\n          return this.getInputString\n        else\n          return ''\n      },\n      set(newValue) {\n        inputString = newValue\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.input-fields{ \n  .input-wrapper, .headline-wrapper {\n    display: inline-block;\n    margin: 10px;\n  }\n  .headline-wrapper {\n    .headline {\n      text-align: left;\n    }\n  }\n  .input-wrapper {\n    button {\n      display: inline-block;\n      border: 0px;\n      border-radius: 5px;\n      margin: 7px 13px;\n      cursor: pointer;\n    }\n\n    button.primary {\n      background-color: #1ca3cc;\n      color: #fff;\n    }\n  }\n}\n\n.output-fields {\n\n  .output-wrapper {\n    width: 300px;\n\n    .output-stats {\n      text-align: left;\n    }\n  }\n  \n}\n\n</style>\n"]}]}