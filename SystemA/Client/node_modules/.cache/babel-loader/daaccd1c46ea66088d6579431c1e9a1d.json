{"remainingRequest":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/babel-loader/lib/index.js!/home/knkbga/chartsHQ/SystemA/Client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/knkbga/chartsHQ/SystemA/Client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/knkbga/chartsHQ/SystemA/Client/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/knkbga/chartsHQ/SystemA/Client/src/App.vue","mtime":1561979297862},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/cache-loader/dist/cjs.js","mtime":1561979296854},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/babel-loader/lib/index.js","mtime":1561979296822},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/cache-loader/dist/cjs.js","mtime":1561979296854},{"path":"/home/knkbga/chartsHQ/SystemA/Client/node_modules/vue-loader/lib/index.js","mtime":1561979297758}],"contextDependencies":[],"result":["import _objectSpread from \"/home/knkbga/chartsHQ/SystemA/Client/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'app',\n  data: function data() {\n    return {\n      stats: {\n        mean: '',\n        median: '',\n        variance: ''\n      }\n    };\n  },\n  methods: {\n    genRandom: function genRandom() {\n      this.$store.dispatch('genRandom');\n    },\n    genStats: function genStats() {\n      if (this.inputString == '') {\n        alert(\"Input is empty\");\n      } else {\n        this.$store.dispatch('genStats', this.inputString);\n      }\n    },\n    onChange: function onChange(e) {\n      this.$store.dispatch('updateInput', e.target.value);\n    }\n  },\n  computed: _objectSpread({}, mapGetters(['getStatus', 'getInputString', 'getPrompt', 'getStats']), {\n    formatStringToArray: function formatStringToArray() {\n      return '[' + this.inputString + ']';\n    },\n    inputString: {\n      get: function get() {\n        if (this.getInputString != '') return this.getInputString;else return '';\n      },\n      set: function set(newValue) {\n        inputString = newValue;\n      }\n    }\n  })\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,MAAA,EAAA,EAFA;AAGA,QAAA,QAAA,EAAA;AAHA;AADA,KAAA;AAOA,GAVA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,WAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AACA,UAAA,KAAA,WAAA,IAAA,EAAA,EAAA;AACA,QAAA,KAAA,CAAA,gBAAA,CAAA;AACA,OAFA,MAEA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,UAAA,EAAA,KAAA,WAAA;AACA;AACA,KAVA;AAWA,IAAA,QAXA,oBAWA,CAXA,EAWA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,aAAA,EAAA,CAAA,CAAA,MAAA,CAAA,KAAA;AACA;AAbA,GAXA;AA0BA,EAAA,QAAA,oBACA,UAAA,CAAA,CACA,WADA,EAEA,gBAFA,EAGA,WAHA,EAIA,UAJA,CAAA,CADA;AAOA,IAAA,mBAPA,iCAOA;AACA,aAAA,MAAA,KAAA,WAAA,GAAA,GAAA;AACA,KATA;AAUA,IAAA,WAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,YAAA,KAAA,cAAA,IAAA,EAAA,EACA,OAAA,KAAA,cAAA,CADA,KAGA,OAAA,EAAA;AACA,OANA;AAOA,MAAA,GAPA,eAOA,QAPA,EAOA;AACA,QAAA,WAAA,GAAA,QAAA;AACA;AATA;AAVA;AA1BA,CAAA","sourcesContent":["<template>\n  <div id=\"app\">\n    <h4 style=\"color:red\">{{ getPrompt }}</h4>\n    <div class=\"input-fields\">\n      <div class=\"headline-wrapper\">\n        <h2 class=\"headline\">Enter list</h2>\n        <p>Enter comma seperated list of numbers</p>\n      </div>\n      <div class=\"input-wrapper\">\n        <input @input=\"onChange\" v-model=\"inputString\" :disabled=\"getStatus==='wait'\" class=\"input-string\" type=\"text\">\n        <br>\n        <button v-on:click=\"genRandom()\">Generate<br>Random Numbers</button>\n        <button v-on:click=\"genStats()\" class=\"primary\">Calculate<br>Statistics</button>\n      </div>\n    </div>\n    <hr>\n    <div class=\"output-fields\" align=\"center\">\n      <div class=\"output-wrapper\">\n        <p class=\"output-stats\">\n          <span>Original Data: </span>\n          <span>{{ '[' + inputString + ']' }}</span>\n        </p>\n        <p class=\"output-stats\">\n          <span>Mean: </span>\n          <span>{{ getStats.mean }}</span>\n        </p>\n        <p class=\"output-stats\">\n          <span>Median: </span>\n          <span>{{ getStats.median }}</span>\n        </p>\n        <p class=\"output-stats\">\n          <span>Variance: </span>\n          <span>{{ getStats.variance }}</span>\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'app',\n  data() {\n    return {\n      stats:{\n        mean: '',\n        median: '',\n        variance: ''\n      }\n    }\n  },\n  methods: {\n    genRandom() {\n      this.$store.dispatch('genRandom')\n    },\n    genStats() {\n      if(this.inputString == '') {\n        alert(\"Input is empty\")\n      } else {\n        this.$store.dispatch('genStats', this.inputString)\n      }\n    },\n    onChange(e) {\n      this.$store.dispatch('updateInput', e.target.value)\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'getStatus',\n      'getInputString',\n      'getPrompt',\n      'getStats'\n    ]),\n    formatStringToArray() {\n      return '[' + this.inputString + ']'\n    },\n    inputString: {\n      get() {\n        if(this.getInputString != '')\n          return this.getInputString\n        else\n          return ''\n      },\n      set(newValue) {\n        inputString = newValue\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.input-fields{ \n  .input-wrapper, .headline-wrapper {\n    display: inline-block;\n    margin: 10px;\n  }\n  .headline-wrapper {\n    .headline {\n      text-align: left;\n    }\n  }\n  .input-wrapper {\n    button {\n      display: inline-block;\n      border: 0px;\n      border-radius: 5px;\n      margin: 7px 13px;\n      cursor: pointer;\n    }\n\n    button.primary {\n      background-color: #1ca3cc;\n      color: #fff;\n    }\n  }\n}\n\n.output-fields {\n\n  .output-wrapper {\n    width: 300px;\n\n    .output-stats {\n      text-align: left;\n    }\n  }\n  \n}\n\n</style>\n"],"sourceRoot":"src"}]}